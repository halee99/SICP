(define (xor a b)
  (or (and (not a) b) (and a (not b))))

(define (multiple-dwelling)
  (let ((betty (amb 1 2 3 4 5))
        (ascell (amb 1 2 3 4 5))
        (joan (amb 1 2 3 4 5))
        (katie (amb 1 2 3 4 5))
        (mary (amb 1 2 3 4 5)))
    (require (xor (= katie 2) (= betty 3)))
    (require (xor (= ascell 1) (= joan 2)))
    (require (xor (= joan 3) (= ascell 5)))
    (require (xor (= katie 2) (= mary 4)))
    (require (xor (= mary 4) (= betty 1)))
    (require
     (distinct? (list betty ascell joan katie mary)))
    (list (list 'betty betty)
          (list 'ascell ascell)
          (list 'joan joan)
          (list 'katie katie)
          (list 'mary mary))))
