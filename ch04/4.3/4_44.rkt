(define (non-attack? a b)
  (define a1 (car a))
  (define a2 (cdr a))
  (define b1 (car b))
  (define b2 (cdr b))
  (not (or (= a1 b1)
           (= a2 b2)
           (= (- a1 b1) (- a2 b2))
           (= (- b1 a1) (- a2 b2)))))

(define (non-one-attack-queens? a queens)
  (cond ((null? queens) true)
        ((non-attack? a (cadr queens)) (non-one-attack-queens? a (cdr queens)))
        (else false)))

(define (require-queens queens)
  (cond ((null? queens) (require true))
        ((non-one-attack-queens? a (cdr queens)) (require-queens (cdr queens)))
        (else (require false))))

(define (eight-postions)
  (define (postions) (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
  (define (generate i)
    (if (= i 0)
        '()
        (cons (postions) (generate (- i 1)))))
  (generate 8))

(define (eight-queens)
  (let ((queens (eight-postions)))
    (require-queens queens)
    queens))
