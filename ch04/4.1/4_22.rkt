(define (let-parameters exp) (cadr exp))
(define (let-body exp) (caddr exp))

(define (param->lambda-parameters param)
  (define (convert param)
    (if (null? param)
        '()
        (cons (caar param) (convert (cdr param)))))
  (convert param))

(define (param->lambda-exp param)
  (define (convert param)
    (if (null? param)
        '()
        (cons (cdar param) (convert (cdr param)))))
  (convert param))

(define (let->combination exp)
  (cons (make-lambda (param->lambda-parameters (let-parameters exp))
                     (let-body exp))
        (param->lambda-exp (let-parameters exp))))

(define (analyze-let exp)
  (let ((body (let-body exp))
        (lambda-parameters (param->lambda-parameters (let-parameters exp)))
        (lambda-exps (param->lambda-exp (let-parameters exp))))
    (let ((lproc (analyze-lambda (make-let lambda-parameters body)))
          (eprocs (map analyze lambda-exps)))
      (lambda (env)
        (execute-application (lproc env)
                             (map (lambda (eproc) (eproc env))
                                  eprocs))))))
