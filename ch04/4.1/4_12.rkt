(define (each vars vals null-process find-process)
  (let ((vars (frame-variables frame))
        (vals (frame-values frame)))
  (cond ((null? vars)
         (null-process '()))
        ((eq? var (car vars))
         (find-process vals val))
        (else (each (cdr vars) (cdr vals) null-process find-process)))))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (each (frame-variables frame)
                (frame-values frame)
                (lambda (x) (env-loop (enclosing-environment env)))
                (lambda (vals val) (car vals))))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (each (frame-variables frame)
                (frame-values frame)
                (lambda (x) (env-loop (enclosing-environment env)))
                (lambda (vals val) (set-car! vals val))))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (each (frame-variables frame)
          (frame-values frame)
          (lambda (x) (add-binding-to-frame! var val frame))
          (lambda (vals val) (set-car! vals val)))))
